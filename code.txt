import './style.css'
import * as THREE from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'; // Import OrbitControls
// import { tri } from 'three/webgpu';

// Create the scene
const scene = new THREE.Scene();

// Create a camera
const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
camera.position.set(0, 0, 5); // Position the camera at (5, 5, 5)

// Create a renderer
const renderer = new THREE.WebGLRenderer();
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);

// Create a plane - test with a triangle(half quad)
// 1. vertices
// 2. indices
// 3. Faces
// 4. Buffer custom geometry
const vertices = new Float32Array([
  // Front face
  -1, -1,  1,  // Vertex 0
   1, -1,  1,  // Vertex 1
   1,  1,  1,  // Vertex 2
  -1,  1,  1,  // Vertex 3
  // Back face
  -1, -1, -1,  // Vertex 4
   1, -1, -1,  // Vertex 5
   1,  1, -1,  // Vertex 6
  -1,  1, -1   // Vertex 7
]);

const indices = new Uint16Array([
  // Front face
  0, 1, 2,
  0, 2, 3,
  // Back face
  4, 6, 5,
  4, 7, 6,
  // Top face
  3, 2, 6,
  3, 6, 7,
  // Bottom face
  0, 4, 5,
  0, 5, 1,
  // Right face
  1, 5, 6,
  1, 6, 2,
  // Left face
  0, 3, 7,
  0, 7, 4
]);

// Set the attributes
const geometry = new THREE.BufferGeometry();
geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));
geometry.setIndex(new THREE.BufferAttribute(indices, 1));

// Create material 
const material = new THREE.MeshBasicMaterial({ color: 'red' });

// Create mesh
const cube = new THREE.Mesh(geometry, material);

// Built-in Matrix scaling
const scaleMatrix = new THREE.Matrix4();
scaleMatrix.makeScale(1.5, 2.0, 0.5); // Scale x by 1.5, y by 2.0, z by 0.5

// Apply the scaling matrix to the cube's geometry
cube.applyMatrix4(scaleMatrix);

// Add the triangle to the scene
scene.add(cube);

// Set up OrbitControls
const controls = new OrbitControls(camera, renderer.domElement);
controls.enableDamping = true; // an animation loop is required when either damping or auto-rotation are enabled
controls.dampingFactor = 0.25;
controls.screenSpacePanning = false; // Prevents camera from moving vertically when dragging

// Animation loop
function animate() {
    requestAnimationFrame(animate);

    // Update controls
    controls.update(); // only required if controls.enableDamping = true, or if controls.autoRotate = true

    // Render the scene
    renderer.render(scene, camera);
}

// Handle window resizing
window.addEventListener('resize', () => {
    const width = window.innerWidth;
    const height = window.innerHeight;
    renderer.setSize(width, height);
    camera.aspect = width / height;
    camera.updateProjectionMatrix();
});

// Start the animation loop
animate();



// Built-in Matrix scaling
const scaleMatrix = new THREE.Matrix4();
scaleMatrix.makeScale(1.5, 2.0, 0.5); // Scale x by 1.5, y by 2.0, z by 0.5

// Apply the scaling matrix to the cube's geometry
// cube.applyMatrix4(scaleMatrix);


// Custom scaling matrix

let positionAttribute = geometry.getAttribute('position');
const verticesToUpdate = positionAttribute.array;
console.log(verticesToUpdate);

for(let i = 0; i < vertices.length; i += 3)
{
  verticesToUpdate[i]     *= 0.5; // Scale x
  verticesToUpdate[i + 1] *= 0.35; // Scale y
  verticesToUpdate[i + 2] *= 0.2; // Scale z
}

console.log(verticesToUpdate);

// Update the position attribute with the new vertices
positionAttribute.needsUpdate = true;